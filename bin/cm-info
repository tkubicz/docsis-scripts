#!/usr/bin/env bash

CMTS_SNMP_COMMUNITY=public
CM_SNMP_COMMUNITY=private
CM_FORCE_IPV=4
SNMP_TIMEOUT=1
SNMP_RETRIES=2
G_DEBUG=0

usage()
{
    cat << EOF
usage: $0 options

This script gets Cable Modem information like RF and SNR levels.
More scripts at https://github.com/martinclaro/docsis-scripts/

OPTIONS:
    -h          Show this message
    -r ipaddr   CMTS IP address
    -k text     CMTS SNMP Community (default: ${CMTS_SNMP_COMMUNITY})
    -m mac      CM MAC address
    -c text     CM SNMP Community (default: ${CM_SNMP_COMMUNITY})
    -4          Force usage of IPv4 to access Cable Modem (default)
    -6          Force usage of IPv6 to access Cable Modem
    -T seconds  Timeout (default: ${SNMP_TIMEOUT})
    -R count    Retries (default: ${SNMP_RETRIES})
    -d          Debug mode (default: off)

EOF
}

C_AWK=`which awk`
C_SNMPGET=`which snmpget`
C_SNMPGETNEXT=`which snmpgetnext`
C_SNMPWALK=`which snmpwalk`

f_snmpget_enum()
{
    L_COMMUNITY=${1}
    L_ADDR=${2}
    L_OID=${3}
    ${C_SNMPGET} -v2c -c "${L_COMMUNITY}" \
        -t ${SNMP_TIMEOUT} -r ${SNMP_RETRIES} \
        -Ih -OnvqU -m all "${L_ADDR}" "${L_OID}" 2>/dev/null
}

f_snmpget_string()
{
    L_COMMUNITY=${1}
    L_ADDR=${2}
    L_OID=${3}
    ${C_SNMPGET} -v2c -c "${L_COMMUNITY}" \
        -t ${SNMP_TIMEOUT} -r ${SNMP_RETRIES} \
        -Onvq -m all "${L_ADDR}" "${L_OID}" 2>/dev/null
}

f_snmpgetnext_enum()
{
    L_COMMUNITY=${1}
    L_ADDR=${2}
    L_OID=${3}
    ${C_SNMPGETNEXT} -v2c -c "${L_COMMUNITY}" \
        -t ${SNMP_TIMEOUT} -r ${SNMP_RETRIES} \
        -Ih -OnqU -m all "${L_ADDR}" "${L_OID}" 2>/dev/null
}

f_snmpwalk_string()
{
    L_COMMUNITY=${1}
    L_ADDR=${2}
    L_OID=${3}
    ${C_SNMPWALK} -v2c -c "${L_COMMUNITY}" \
        -t ${SNMP_TIMEOUT} -r ${SNMP_RETRIES} \
        -Onq -m all "${L_ADDR}" "${L_OID}" 2>/dev/null
}

f_snmpwalk_enum()
{
    L_COMMUNITY=${1}
    L_ADDR=${2}
    L_OID=${3}
    ${C_SNMPWALK} -v2c -c "${L_COMMUNITY}" \
        -t ${SNMP_TIMEOUT} -r ${SNMP_RETRIES} \
        -Ih -OnqU -m all "${L_ADDR}" "${L_OID}" 2>/dev/null
}

f_ipv6_expand()
{
    L_IPV6=`echo "${1}" | tr '[:upper:]' '[:lower:]' | sed -e 's,[^a-f0-9\:],,g'`
    L_TMP0=`echo "${L_IPV6}" | grep '::'`
    L_TMP1=`echo "${L_IPV6}" | sed -e 's,[^\:],,g' | wc -m | ${C_AWK} '{print $1}'`
    if [ ${L_TMP1} -eq 1 ]; then
        # Straight IPv6 address
        L_IPV6=${L_IPV6:0:4}:${L_IPV6:4:4}:${L_IPV6:8:4}:${L_IPV6:12:4}:${L_IPV6:16:4}:${L_IPV6:20:4}:${L_IPV6:24:4}:${L_IPV6:28:4}
        L_TMP0=`echo "${L_IPV6}" | grep '::'`
        L_TMP1=`echo "${L_IPV6}" | sed -e 's,[^\:],,g' | wc -m | ${C_AWK} '{print $1}'`
    fi

    if [ "x${L_TMP0}" == "x" ]; then
        L_BLKS=$[ 9 - ${L_TMP1} ]
    else
        L_BLKS=$[ 8 - ${L_TMP1} ]
    fi

    if [ $L_BLKS -lt 7 ]; then
        L_FILL=`echo "${L_BLKS}" | ${C_AWK} '{for(i=0;i<=$1;i++)x=x""sprintf (":%4s", "0");gsub(/ /,"0",x);print x}'`
        L_IPV6=`echo "${L_IPV6}" | sed 's,::,'${L_FILL}:',g'`
    fi

    L_RET=`echo "${L_IPV6}" | ${C_AWK} 'BEGIN{FS=":"}{for(i=1;i<=NF;i++)x=x""sprintf ("%4s:", $i);gsub(/ /,"0",x);print substr(x,0,39)}'`
    echo ${L_RET:0:39}
}

f_freq_format()
{
    L_HZ=${1}
    echo "${L_HZ}" | ${C_AWK} '{printf "%0.3f MHz",$1/1000000}'
}

while getopts "hr:k:m:c:T:R:d46" OPTION
do
    case ${OPTION} in
        h)
            usage
            exit 1
            ;;
        r)
            CMTS_IPADDR=${OPTARG}
            ;;
        k)
            CMTS_SNMP_COMMUNITY=${OPTARG}
            ;;
        m)
            CM_MAC=`echo "${OPTARG}" | tr '[:upper:]' '[:lower:]' | sed -e 's,[^a-f0-9],,g'`
            CM_MAC_OID=`printf "%d.%d.%d.%d.%d.%d" 0x${CM_MAC:0:2} 0x${CM_MAC:2:2} 0x${CM_MAC:4:2} 0x${CM_MAC:6:2} 0x${CM_MAC:8:2} 0x${CM_MAC:10:2}`
            ;;
        c)
            CM_SNMP_COMMUNITY=${OPTARG}
            ;;
        f)
            CM_READ_FW=1
            ;;
        T)
            SNMP_TIMEOUT=${OPTARG}
            ;;
        R)
            SNMP_RETRIES=${OPTARG}
            ;;
        d)
            G_DEBUG=1
            ;;
        4)
            CM_FORCE_IPV=4
            ;;
        6)
            CM_FORCE_IPV=6
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

if [ "no${CMTS_IPADDR}" == "no" ] || [ "no${CM_MAC}" == "no" ] || [ "no${CMTS_SNMP_COMMUNITY}" == "no" ]; then
    usage
    exit 1
fi

printf "\nLoading information... Please wait... "

if [ ${G_DEBUG} -gt 0 ]; then
    G_OS=`uname -s | tr [:upper:] [:lower:]`
    if [ "X${G_OS}" == "Xdarwin" ]; then
        set -x
    else
        N=`date +%s%N`;
        export PS4='+[ $(((`date +%s%N`-$N)/1000000))ms ][ ${BASH_SOURCE}:${LINENO} ]: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }';
        set -x
    fi
fi

# Force to Unload MIBs
export MIBS=""

# Loading OIDs
SNMP_SYS_DESCR_OID=".1.3.6.1.2.1.1.1.0"                             # SNMPv2-MIB::sysDescr.0
SNMP_SYS_OBJECTID_OID=".1.3.6.1.2.1.1.2.0"                          # SNMPv2-MIB::sysObjectID.0
SNMP_SYS_UPTIME_OID=".1.3.6.1.2.1.1.3.0"                            # DISMAN-EVENT-MIB::sysUpTimeInstance.0
SNMP_SYS_CONTACT_OID=".1.3.6.1.2.1.1.4.0"                           # SNMPv2-MIB::sysContact.0
SNMP_SYS_NAME_OID=".1.3.6.1.2.1.1.5.0"                              # SNMPv2-MIB::sysName.0
SNMP_SYS_LOCATION_OID=".1.3.6.1.2.1.1.6.0"                          # SNMPv2-MIB::sysLocation.0

SNMP_IF_DESCR=".1.3.6.1.2.1.2.2.1.2"                                # IF-MIB::ifDescr
SNMP_IF_NAME=".1.3.6.1.2.1.31.1.1.1.1"                              # IF-MIB::ifName
SNMP_IF_ALIAS=".1.3.6.1.2.1.31.1.1.1.18"                            # IF-MIB::ifAlias

DOCSIS_CAPABILITY_OID=".1.3.6.1.2.1.10.127.1.1.5.0"                 # DOCS-IF-MIB::docsIfDocsisBaseCapability.0
DOCSIS_CAPABILITY_OID_D31=".1.3.6.1.4.1.4491.2.1.28.1.1.0"          # DOCS-IF31-MIB::docsIf31CmDocsisBaseCapability.0

CMT_DS_CHN_FREQ_OID=".1.3.6.1.2.1.10.127.1.1.1.1.2"                 # DOCS-IF-MIB::docsIfDownChannelFrequency
CMT_US_CHN_FREQ_OID=".1.3.6.1.2.1.10.127.1.1.2.1.2"                 # DOCS-IF-MIB::docsIfUpChannelFrequency

CM_SERIAL_OID=".1.3.6.1.2.1.69.1.1.4.0"                             # DOCS-CABLE-DEVICE-MIB::docsDevSerialNumber.0
CM_SW_SERVER_OID=".1.3.6.1.2.1.69.1.3.1.0"                          # DOCS-CABLE-DEVICE-MIB::docsDevSwServer.0
CM_SW_FWFILE_OID=".1.3.6.1.2.1.69.1.3.2.0"                          # DOCS-CABLE-DEVICE-MIB::docsDevSwFilename.0
CM_SW_ADMIN_STATUS_OID=".1.3.6.1.2.1.69.1.3.3.0"                    # DOCS-CABLE-DEVICE-MIB::docsDevSwAdminStatus.0
CM_SW_OPER_STATUS_OID=".1.3.6.1.2.1.69.1.3.4.0"                     # DOCS-CABLE-DEVICE-MIB::docsDevSwOperStatus.0
CM_SW_VERSION_OID=".1.3.6.1.2.1.69.1.3.5.0"                         # DOCS-CABLE-DEVICE-MIB::docsDevSwCurrentVers.0
CM_SW_SVR_ADDR_OID=".1.3.6.1.2.1.69.1.3.6.0"                        # DOCS-CABLE-DEVICE-MIB::docsDevSwServerAddressType.0
CM_SW_SVR_TYPE_OID=".1.3.6.1.2.1.69.1.3.7.0"                        # DOCS-CABLE-DEVICE-MIB::docsDevSwServerAddress.0
CM_SW_SVR_TRANSP_OID=".1.3.6.1.2.1.69.1.3.8.0"                      # DOCS-CABLE-DEVICE-MIB::docsDevSwServerTransportProtocol.0

CMTS_SYSDESCR=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_SYS_DESCR_OID}" | head -1`
CMTS_SYSNAME=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_SYS_NAME_OID}"`
CMTS_UPTIME=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_SYS_UPTIME_OID}" | ${C_AWK} 'BEGIN{FS=":"}{print $1" days, "$2":"$3":"$4}'`

CMTS_D3_BONDING=0

# First, check DOCSIS 3.1 compatibility...
CMTS_DOCSIS_CAPABILITY=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${DOCSIS_CAPABILITY_OID_D31}"`
case $CMTS_DOCSIS_CAPABILITY in
    docsis10|1)
        CMTS_DOCSIS_CAPABILITY=1.0
        ;;
    docsis11|2)
        CMTS_DOCSIS_CAPABILITY=1.1
        ;;
    docsis20|3)
        CMTS_DOCSIS_CAPABILITY=2.0
        ;;
    docsis30|4)
        CMTS_DOCSIS_CAPABILITY=3.0
        CMTS_D3_BONDING=1
        ;;
    docsis31|5)
        CMTS_DOCSIS_CAPABILITY=3.1
        CMTS_D3_BONDING=1
        ;;
    *)
        # Fallback to DOCSIS 3.0 o prior versions' OIDs
        CMTS_DOCSIS_CAPABILITY=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${DOCSIS_CAPABILITY_OID}"`
        case $CMTS_DOCSIS_CAPABILITY in
            docsis10|1)
                CMTS_DOCSIS_CAPABILITY=1.0
                ;;
            docsis11|2)
                CMTS_DOCSIS_CAPABILITY=1.1
                ;;
            docsis20|3)
                CMTS_DOCSIS_CAPABILITY=2.0
                ;;
            docsis30|4)
                CMTS_DOCSIS_CAPABILITY=3.0
                CMTS_D3_BONDING=1
                ;;
            docsis31|5)
                CMTS_DOCSIS_CAPABILITY=3.1
                CMTS_D3_BONDING=1
                ;;
            *)
                CMTS_DOCSIS_CAPABILITY=Unknown
                CMTS_D3_BONDING=1
                ;;
        esac
        ;;
esac

CM_INDEX_OID=".1.3.6.1.2.1.10.127.1.3.7.1.2.${CM_MAC_OID}"
CM_INDEX=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_INDEX_OID}" | sed -e 's,[^0-9],,g'`

if [ "no${CM_INDEX}" == "no" ]; then
    echo "ERROR: Could not retreive Cable Modem ifIndex from CMTS for ${CM_MAC:0:4}.${CM_MAC:4:4}.${CM_MAC:8:4}. Exiting..."
    exit 2
fi

CM_CMTS_DS_CHN_IFINDEX_OID=".1.3.6.1.2.1.10.127.1.3.3.1.4.${CM_INDEX}"  # DOCS-IF-MIB::docsIfCmtsCmStatusDownChannelIfIndex
CM_CMTS_US_CHN_IFINDEX_OID=".1.3.6.1.2.1.10.127.1.3.3.1.5.${CM_INDEX}"  # DOCS-IF-MIB::docsIfCmtsCmStatusUpChannelIfIndex

CMTS_CM_STATUS_OID=".1.3.6.1.2.1.10.127.1.3.3.1.9.${CM_INDEX}"      # DOCS-IF-MIB::docsIfCmtsCmStatusValue.X

CM_IPADDR_OID=".1.3.6.1.2.1.10.127.1.3.3.1.3.${CM_INDEX}"           # DOCS-IF-MIB::docsIfCmtsCmStatusIpAddress.X
CM_IP4ADDR_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.3.1.5.${CM_INDEX}"    # DOCS-IF3-MIB::docsIf3CmtsCmRegStatusIPv4Addr.X
CM_IP6ADDR_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.3.1.3.${CM_INDEX}"    # DOCS-IF3-MIB::docsIf3CmtsCmRegStatusIPv6Addr.X

CM_RF_DS_OID=".1.3.6.1.2.1.10.127.1.1.1.1.6.3"                      # DOCS-IF-MIB::docsIfDownChannelPower.3
CM_RF_DS_OID_D3=".1.3.6.1.2.1.10.127.1.1.1.1.6"                     # DOCS-IF3-MIB::docsIfDownChannelPower.Y

CM_RF_US_OID=".1.3.6.1.2.1.10.127.1.2.2.1.3.2"                      # DOCS-IF-MIB::docsIfCmStatusTxPower.2
CM_RF_US_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.2.1.1"                  # DOCS-IF3-MIB::docsIf3CmStatusUsTxPower.Y

CM_SNR_DS_OID=".1.3.6.1.2.1.10.127.1.1.4.1.5.3"                     # DOCS-IF-MIB::docsIfSigQSignalNoise.3
CM_SNR_DS_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.24.1.1"                # DOCS-IF3-MIB::docsIf3SignalQualityExtRxMER.Y

CM_SNR_US_OID=".1.3.6.1.2.1.10.127.1.3.3.1.13.${CM_INDEX}"          # DOCS-IF-MIB::docsIfCmtsCmStatusSignalNoise.X
CM_SNR_US_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.4.1.4.${CM_INDEX}"     # DOCS-IF3-MIB::docsIf3CmtsCmUsStatusSignalNoise.X

CM_MACDOMAIN_IFINDEX_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.3.1.7.${CM_INDEX}"  # DOCS-IF3-MIB::docsIf3CmtsCmRegStatusMdIfIndex.X
CM_SERVGROUP_IFINDEX_OID_D3=".1.3.6.1.4.1.4491.2.1.20.1.3.1.8.${CM_INDEX}"  # DOCS-IF3-MIB::docsIf3CmtsCmRegStatusMdCmSgId.X

DOCSIS_QOS_PKTCLASS_DIR_OID="1.3.6.1.2.1.10.127.7.1.1.1.2"          # DOCS-QOS-MIB::docsQosPktClassDirection.X.Y.Z
DOCSIS_QOS_PKTCLASS_DIR_OID_D3=".1.3.6.1.4.1.4491.2.1.21.1.1.1.2"   # DOCS-QOS3-MIB::docsQosPktClassDirection.X.Y.Z

DOCSIS_QOS_PKTCLASS_PRIO_OID=".1.3.6.1.2.1.10.127.7.1.1.1.3"        # DOCS-QOS-MIB::docsQosPktClassPriority.X.Y.Z
DOCSIS_QOS_PKTCLASS_PRIO_OID_D3=".1.3.6.1.4.1.4491.2.1.21.1.1.1.3"  # DOCS-QOS3-MIB::docsQosPktClassPriority.X.Y.Z

# Reading Values
CMTS_CM_STATUS=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CMTS_CM_STATUS_OID}" | grep -vi '^no such'`
CM_IP4ADDR=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_IPADDR_OID}" | grep -vi '^no such' | sed -e 's,[^0-9\.],,g'`
CM_IP6ADDR=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_IP6ADDR_OID_D3}" | grep -vi '^no such' | sed -e 's,[^0-9a-fA-F\:],,g'`

if [ "no${CM_IP6ADDR}" != "no" ]; then
    CM_IPXADDR=`f_ipv6_expand "${CM_IP6ADDR}"`
    CM_IP6ADDR="${CM_IPXADDR}"
fi

if [ "no${CM_IP4ADDR}" != "no" ] && [ "no${CM_IP4ADDR}" != "no0.0.0.0" ]; then
    CM_IPADDR=${CM_IP4ADDR}
else
    CM_IP4ADDR=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_IP4ADDR_OID_D3}" | sed -e 's,[^0-9\.],,g'`

    if [ "no${CM_IP4ADDR}" != "no" ] && [ "no${CM_IP4ADDR}" != "no0.0.0.0" ]; then
        CM_IPADDR=${CM_IP4ADDR}
    elif [ "no${CM_IP6ADDR}" != "no" ] && [ "no${CM_IP6ADDR}" != "no0000:0000:0000:0000:0000:0000:0000:0000" ]; then
        CM_IPADDR=udp6:${CM_IP6ADDR}
    else
        echo "ERROR: Could not retreive Cable Modem IP address for ${CM_MAC:0:4}.${CM_MAC:4:4}.${CM_MAC:8:4}."
        echo "ERROR: Cable Modem Status: ${CMTS_CM_STATUS:-N/A}"
        echo ""
        exit 3
    fi
fi

if [ "no${CM_IP4ADDR}" == "no" ] || [ "no${CM_IP4ADDR}" == "no0.0.0.0" ]; then
    CM_IP4ADDR="No IPv4 Available"
fi
if [ "no${CM_IP6ADDR}" == "no" ] || [ "no${CM_IP6ADDR}" == "no0000:0000:0000:0000:0000:0000:0000:0000" ]; then
    CM_IP6ADDR="No IPv6 Available"
fi

CM_RFP_DS_BONDING=0
CM_RFP_US_BONDING=0
CM_SNR_DS_BONDING=0
CM_SNR_US_BONDING=0

CM_D3_BONDING=0

# First, check DOCSIS 3.1 compatibility...
CM_DOCSIS_CAPABILITY=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${DOCSIS_CAPABILITY_OID_D31}"`
case $CM_DOCSIS_CAPABILITY in
    docsis10|1)
        CM_DOCSIS_CAPABILITY=1.0
        ;;
    docsis11|2)
        CM_DOCSIS_CAPABILITY=1.1
        ;;
    docsis20|3)
        CM_DOCSIS_CAPABILITY=2.0
        ;;
    docsis30|4)
        CM_DOCSIS_CAPABILITY=3.0
        CM_D3_BONDING=1
        ;;
    docsis31|5)
        CM_DOCSIS_CAPABILITY=3.1
        CM_D3_BONDING=1
        ;;
    *)
        CM_DOCSIS_CAPABILITY=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${DOCSIS_CAPABILITY_OID}"`
        case $CM_DOCSIS_CAPABILITY in
            docsis10|1)
                CM_DOCSIS_CAPABILITY=1.0
                ;;
            docsis11|2)
                CM_DOCSIS_CAPABILITY=1.1
                ;;
            docsis20|3)
                CM_DOCSIS_CAPABILITY=2.0
                ;;
            docsis30|4)
                CM_DOCSIS_CAPABILITY=3.0
                CM_D3_BONDING=1
                ;;
            docsis31|5)
                CM_DOCSIS_CAPABILITY=3.1
                CM_D3_BONDING=1
                ;;
            *)
                CM_DOCSIS_CAPABILITY=Unknown
                # Do not try to get DOCSIS 3.0 channel bonding information...
                CM_D3_BONDING=0
                ;;
        esac
        ;;
esac

if [ ${CM_D3_BONDING} -eq 0 ]; then

    CM_RFP_DS_BONDING=1
    CM_RFP_US_BONDING=1
    CM_SNR_DS_BONDING=1
    CM_SNR_US_BONDING=1

    CM_RFP_DS_B[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" ${CM_IPADDR} ${CM_RF_DS_OID} | ${C_AWK} '{printf "%0.1f",$1/10}' | ${C_AWK} '{printf "%5s",$1}'`
    CM_RFP_US_B[ ${CM_RFP_US_BONDING} ]=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" ${CM_IPADDR} ${CM_RF_US_OID} | ${C_AWK} '{printf "%0.1f",$1/10}' | ${C_AWK} '{printf "%5s",$1}'`
    CM_SNR_DS_B[ ${CM_SNR_DS_BONDING} ]=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" ${CM_IPADDR} ${CM_SNR_DS_OID} | ${C_AWK} '{printf "%0.1f",$1/10}' | ${C_AWK} '{printf "%5s",$1}'`
    CM_SNR_US_B[ ${CM_SNR_US_BONDING} ]=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" ${CMTS_IPADDR} ${CM_SNR_US_OID} | ${C_AWK} '{printf "%0.1f",$1/10}' | ${C_AWK} '{printf "%5s",$1}'`

    CM_CMTS_DS_CHN_IFINDEX=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_CMTS_DS_CHN_IFINDEX_OID}" | sed -e 's,[^0-9],,g'`
    CM_CMTS_DS_CHN_IFNAME[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_NAME}.${CM_CMTS_DS_CHN_IFINDEX}"`
    CM_CMTS_DS_CHN_IFALIAS[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_ALIAS}.${CM_CMTS_DS_CHN_IFINDEX}"`
    CM_CMTS_DS_CHN_IFDESCR[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_DESCR}.${CM_CMTS_DS_CHN_IFINDEX}"`

    CM_CMTS_US_CHN_IFINDEX=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_CMTS_US_CHN_IFINDEX_OID}" | sed -e 's,[^0-9],,g'`
    CM_CMTS_US_CHN_IFNAME[ ${CM_SNR_US_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_NAME}.${CM_CMTS_US_CHN_IFINDEX}"`
    CM_CMTS_US_CHN_IFALIAS[ ${CM_SNR_US_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_ALIAS}.${CM_CMTS_US_CHN_IFINDEX}"`
    CM_CMTS_US_CHN_IFDESCR[ ${CM_SNR_US_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_DESCR}.${CM_CMTS_US_CHN_IFINDEX}"`

else

    CM_SERVGROUP_IFINDEX=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_SERVGROUP_IFINDEX_OID_D3}" | sed -e 's,[^0-9],,g'`
    if [ "x${CM_SERVGROUP_IFINDEX}" = "x0" ]; then
        CM_MACDOMAIN_IFINDEX=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_MACDOMAIN_IFINDEX_OID_D3}" | sed -e 's,[^0-9],,g'`
        CM_LOADBAL_IFINDEX_OID_D3=".1.3.6.1.4.1.4491.2.1.22.1.8.1.3.${CM_MACDOMAIN_IFINDEX}"    # DOCS-LOADBAL3-MIB::docsLoadbal3GrpStatusMdIfIndex.X
        CM_MACDOMAIN_CHN_CFG_ID=".1.3.6.1.4.1.4491.2.1.20.1.5.1.3.${CM_MACDOMAIN_IFINDEX}"      # DOCS-IF3-MIB::docsIf3MdChCfgChId.X.(Y) = ID
    else
        CM_LOADBAL_IFINDEX_OID_D3=".1.3.6.1.4.1.4491.2.1.22.1.8.1.3.${CM_SERVGROUP_IFINDEX}"    # DOCS-LOADBAL3-MIB::docsLoadbal3GrpStatusMdIfIndex.X
        CM_MACDOMAIN_CHN_CFG_ID=".1.3.6.1.4.1.4491.2.1.20.1.5.1.3.${CM_SERVGROUP_IFINDEX}"      # DOCS-IF3-MIB::docsIf3MdChCfgChId.X.(Y) = ID
    fi

    # CM_LOADBAL_MD_IFINDEX=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_LOADBAL_IFINDEX_OID_D3}" | sed -e 's,[^0-9],,g'`
    # echo "CM_LOADBAL_MD_IFINDEX: ${CM_LOADBAL_MD_IFINDEX}"

    CM_RF_DS_DA=`f_snmpgetnext_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_RF_DS_OID_D3}" | grep "^${CM_RF_DS_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
    while [ "no${CM_RF_DS_DA}" != "no" ]; do
        CM_RFP_DS_BONDING=$[ ${CM_RFP_DS_BONDING} + 1 ]
        CM_RFP_DS_B[ ${CM_RFP_DS_BONDING} ]=`echo "${CM_RF_DS_DA}" | ${C_AWK} '{printf "%5s",$2}'`
        CM_RF_DS_OID_D3_LAST=`echo "${CM_RF_DS_DA}" | ${C_AWK} '{print $1}'`

        CM_DS_CHN_IFINDEX=`echo "${CM_RF_DS_DA}" | awk '{print $1}' | sed -e 's,^'${CM_RF_DS_OID_D3}'\.,,g'`

        CM_CMTS_DS_CHN_FREQ[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CMT_DS_CHN_FREQ_OID}.${CM_DS_CHN_IFINDEX}" | sed -e 's,[^0-9],,g'`

        CM_CMTS_DS_CHN_IFNAME[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_NAME}.${CM_DS_CHN_IFINDEX}"`
        CM_CMTS_DS_CHN_IFALIAS[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_ALIAS}.${CM_DS_CHN_IFINDEX}"`
        CM_CMTS_DS_CHN_IFDESCR[ ${CM_RFP_DS_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_DESCR}.${CM_DS_CHN_IFINDEX}"`

        CM_RF_DS_DA=`f_snmpgetnext_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_RF_DS_OID_D3_LAST}" | grep "^${CM_RF_DS_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
    done

    CM_RF_US_DA=`f_snmpgetnext_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_RF_US_OID_D3}" | grep "^${CM_RF_US_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
    while [ "no${CM_RF_US_DA}" != "no" ]; do
        CM_RFP_US_BONDING=$[ ${CM_RFP_US_BONDING} + 1 ]
        CM_RFP_US_B[ ${CM_RFP_US_BONDING} ]=`echo "${CM_RF_US_DA}" | ${C_AWK} '{printf "%5s",$2}'`
        CM_RF_US_OID_D3_LAST=`echo "${CM_RF_US_DA}" | ${C_AWK} '{print $1}'`
        CM_RF_US_DA=`f_snmpgetnext_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_RF_US_OID_D3_LAST}" | grep "^${CM_RF_US_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
    done

    CM_SNR_DS_DA=`f_snmpgetnext_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_SNR_DS_OID_D3}" | grep "^${CM_SNR_DS_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
    while [ "no${CM_SNR_DS_DA}" != "no" ]; do
        CM_SNR_DS_BONDING=$[ ${CM_SNR_DS_BONDING} + 1 ]
        CM_SNR_DS_B[ ${CM_SNR_DS_BONDING} ]=`echo "${CM_SNR_DS_DA}" | ${C_AWK} '{printf "%5s",$2}'`
        CM_SNR_DS_OID_D3_LAST=`echo "${CM_SNR_DS_DA}" | ${C_AWK} '{print $1}'`
        CM_SNR_DS_DA=`f_snmpgetnext_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_SNR_DS_OID_D3_LAST}" | grep "^${CM_SNR_DS_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
    done

    CM_SNR_US_DA=`f_snmpgetnext_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_SNR_US_OID_D3}" | grep "^${CM_SNR_US_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
	while [ "no${CM_SNR_US_DA}" != "no" ]; do
		CM_SNR_US_BONDING=$[ ${CM_SNR_US_BONDING} + 1 ]
		CM_SNR_US_B[ ${CM_SNR_US_BONDING} ]=`echo "${CM_SNR_US_DA}" | ${C_AWK} '{printf "%5s",$2}'`
		CM_SNR_US_OID_D3_LAST=`echo "${CM_SNR_US_DA}" | ${C_AWK} '{print $1}'`

		CM_CMTS_US_CHN_IFINDEX=`echo "${CM_SNR_US_DA}" | awk '{print $1}' | sed -e 's,^'${CM_SNR_US_OID_D3}'\.,,g'`
		CM_CMTS_US_CHN_FREQ[ ${CM_SNR_US_BONDING} ]=`f_snmpget_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CMT_US_CHN_FREQ_OID}.${CM_CMTS_US_CHN_IFINDEX}" | sed -e 's,[^0-9],,g'`
		CM_CMTS_US_CHN_IFNAME[ ${CM_SNR_US_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_NAME}.${CM_CMTS_US_CHN_IFINDEX}"`
		CM_CMTS_US_CHN_IFALIAS[ ${CM_SNR_US_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_ALIAS}.${CM_CMTS_US_CHN_IFINDEX}"`
		CM_CMTS_US_CHN_IFDESCR[ ${CM_SNR_US_BONDING} ]=`f_snmpget_string "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${SNMP_IF_DESCR}.${CM_CMTS_US_CHN_IFINDEX}"`

		CM_SNR_US_DA=`f_snmpgetnext_enum "${CMTS_SNMP_COMMUNITY}" "${CMTS_IPADDR}" "${CM_SNR_US_OID_D3_LAST}" | grep "^${CM_SNR_US_OID_D3}\." | grep -vi 'no such' | ${C_AWK} '{printf "%s %0.1f",$1,$2/10}'`
	done

fi

# Uptime
CM_UPTIME=`f_snmpget_string "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${SNMP_SYS_UPTIME_OID}" | ${C_AWK} 'BEGIN{FS=":"}{print $1" days, "$2":"$3":"$4}'`

# Get Vendor / Model / Firmware from CM
CM_SYSDESCR=`f_snmpget_string "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${SNMP_SYS_DESCR_OID}" | grep '<<'`
CM_HWREV=`echo "${CM_SYSDESCR}" | sed -e 's,.*<<\(.*\)>>.*,\1,g' | sed -e 's,^.*[Hh][Ww]_[Rr][Ee][Vv]:,,g' | sed -e 's,;.*$,,g' | sed -e 's,^ ,,g' | sed -e 's, $,,g'`
CM_VENDOR=`echo "${CM_SYSDESCR}" | sed -e 's,.*<<\(.*\)>>.*,\1,g' | sed -e 's,^.*[Vv][Ev][Nn][Dd][Oo][Rr]:,,g' | sed -e 's,;.*$,,g' | sed -e 's,^ ,,g' | sed -e 's, $,,g'`
CM_ROM=`echo "${CM_SYSDESCR}" | sed -e 's,.*<<\(.*\)>>.*,\1,g' | sed -e 's,^.*[Bb][Oo][Oo][Tt][Rr]:,,g' | sed -e 's,;.*$,,g' | sed -e 's,^ ,,g' | sed -e 's, $,,g'`
CM_FIRM=`echo "${CM_SYSDESCR}" | sed -e 's,.*<<\(.*\)>>.*,\1,g' | sed -e 's,^.*[Ss][Ww]_[Rr][Ee][Vv]:,,g' | sed -e 's,;.*$,,g' | sed -e 's,^ ,,g' | sed -e 's, $,,g'`
CM_MODEL=`echo "${CM_SYSDESCR}" | sed -e 's,.*<<\(.*\)>>.*,\1,g' | sed -e 's,^.*[Mm][Oo][Dd][Ee][Ll]:,,g' | sed -e 's,;.*$,,g' | sed -e 's,^ ,,g' | sed -e 's, $,,g'`

# Serial Number
CM_SERIAL=`f_snmpget_string "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_SERIAL_OID}"`

# Status
SW_ADMIN_STATUS=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_SW_ADMIN_STATUS_OID}"`
SW_OPER_STATUS=`f_snmpget_enum "${CM_SNMP_COMMUNITY}" "${CM_IPADDR}" "${CM_SW_OPER_STATUS_OID}"`

case ${SW_ADMIN_STATUS} in
    upgradeFromMgt|1)
        SW_ADMIN_STATUS_TXT="upgradeFromMgt(1)"
        SW_ADMIN_STATUS=1
        ;;
    allowProvisioningUpgrade|2)
        SW_ADMIN_STATUS_TXT="allowProvisioningUpgrade(2)"
        SW_ADMIN_STATUS=2
        ;;
    ignoreProvisioningUpgrade|3)
        SW_ADMIN_STATUS_TXT="ignoreProvisioningUpgrade(3)"
        SW_ADMIN_STATUS=3
        ;;
    *)
        SW_ADMIN_STATUS_TXT="unknown(-1)"
        SW_ADMIN_STATUS=-1
        ;;
esac

case ${SW_OPER_STATUS} in
    inProgress|1)
        SW_OPER_STATUS_TXT="inProgress(1)"
        SW_OPER_STATUS=1
        ;;
    completeFromProvisioning|2)
        SW_OPER_STATUS_TXT="completeFromProvisioning(2)"
        SW_OPER_STATUS=2
        ;;
    completeFromMgt|3)
        SW_OPER_STATUS_TXT="completeFromMgt(3)"
        SW_OPER_STATUS=3
        ;;
    failed|4)
        SW_OPER_STATUS_TXT="failed(4)"
        SW_OPER_STATUS=4
        ;;
    other|5)
        SW_OPER_STATUS_TXT="other(5)"
        SW_OPER_STATUS=5
        ;;
    *)
        SW_OPER_STATUS_TXT="unknown(-1)"
        SW_OPER_STATUS=-1
        ;;
esac

# Print Results
printf "DONE!\n\n"

cat << EOF
### Cable Modem ${CM_MAC:0:4}.${CM_MAC:4:4}.${CM_MAC:8:4} ###

### CMTS
CMTS System Description:  ${CMTS_SYSDESCR}
CMTS System Name:         ${CMTS_SYSNAME}
CMTS Uptime:              ${CMTS_UPTIME}
CMTS DOCSIS Capability:   ${CMTS_DOCSIS_CAPABILITY}

### Downstream Channels
EOF

for B in `seq 1 ${CM_SNR_DS_BONDING}`; do
    CHN_FREQ=`f_freq_format "${CM_CMTS_DS_CHN_FREQ[$B]}"`
    printf "Channel %-3s               %s\n" "${B}:" "${CHN_FREQ:-N/A}"
    cat << EOF
Channel Name (Alias):     ${CM_CMTS_DS_CHN_IFNAME[$B]:-N/A} (${CM_CMTS_DS_CHN_IFALIAS[$B]:-N/A})
Channel Description:      ${CM_CMTS_DS_CHN_IFDESCR[$B]:-N/A}

EOF
done

cat << EOF
### Upstream Channels
EOF

for B in `seq 1 ${CM_SNR_US_BONDING}`; do
    CHN_FREQ=`f_freq_format "${CM_CMTS_US_CHN_FREQ[$B]}"`
    printf "Channel %-3s               %s\n" "${B}:" "${CHN_FREQ:-N/A}"
    cat << EOF
Channel Name (Alias):     ${CM_CMTS_US_CHN_IFNAME[$B]:-N/A} (${CM_CMTS_US_CHN_IFALIAS[$B]:-N/A})
Channel Description:      ${CM_CMTS_US_CHN_IFDESCR[$B]:-N/A}

EOF
done

cat << EOF
### Cable Modem
Cable Modem Status:       ${CMTS_CM_STATUS:-N/A}
Cable Modem IP address:   ${CM_IP4ADDR} / ${CM_IP6ADDR}
Cable Modem Uptime:       ${CM_UPTIME}
CM DOCSIS Capability:     ${CM_DOCSIS_CAPABILITY}

### Cable Modem RF/SNR Levels
EOF

CM_MAX_BLOCK=4
if [ ${CM_SNR_DS_BONDING} -gt ${CM_SNR_US_BONDING} ]; then
    CM_MAX_BONDING=`echo "${CM_SNR_DS_BONDING} ${CM_MAX_BLOCK}" | ${C_AWK} '{printf("%0.1f",($1/$2))}' | ${C_AWK} '{printf("%d",$1+=$1<0?0:0.9)}'`
else
    CM_MAX_BONDING=`echo "${CM_SNR_US_BONDING} ${CM_MAX_BLOCK}" | ${C_AWK} '{printf("%0.1f",($1/$2))}' | ${C_AWK} '{printf("%d",$1+=$1<0?0:0.9)}'`
fi
CM_MAX_BONDING=$[ ${CM_MAX_BONDING} * ${CM_MAX_BLOCK} ]

printf "%-26s" "Channel Bonding:"
for B in `seq 1 ${CM_MAX_BONDING}`; do
    if [ ${B} -gt 1 ]; then
        printf " | "
    fi
    printf "%5s" "Ch ${B}"
done
printf "\n"

printf "%-26s" "Downstream Power Level:"
for B in `seq 1 ${CM_MAX_BONDING}`; do
    if [ ${B} -gt 1 ]; then
        printf " | "
    fi
    printf "%5s" "${CM_RFP_DS_B[${B}]:- }"
done
printf " dBmV\n"

printf "%-26s" "Upstream Power Level:"
for B in `seq 1 ${CM_MAX_BONDING}`; do
    if [ ${B} -gt 1 ]; then
        printf " | "
    fi
    printf "%5s" "${CM_RFP_US_B[${B}]:- }"
done
printf " TenthdBmV\n"

printf "%-26s" "Downstream SNR:"
for B in `seq 1 ${CM_MAX_BONDING}`; do
    if [ ${B} -gt 1 ]; then
        printf " | "
    fi
    printf "%5s" "${CM_SNR_DS_B[${B}]:- }"
done
printf " TenthdB\n"

printf "%-26s" "Upstream SNR:"
for B in `seq 1 ${CM_MAX_BONDING}`; do
    if [ ${B} -gt 1 ]; then
        printf " | "
    fi
    printf "%5s" "${CM_SNR_US_B[${B}]:- }"
done
printf " TenthdB\n"

cat << EOF

### Current Firmware
Vendor:                   ${CM_VENDOR:-N/A}
Model:                    ${CM_MODEL:-N/A}
Hardware Version:         ${CM_HWREV:-N/A}
Software Version:         ${CM_FIRM:-N/A}
Boot ROM Version:         ${CM_ROM:-N/A}
Serial Number:            ${CM_SERIAL:-N/A}

### Firmware Management
Admin Status:             ${SW_ADMIN_STATUS_TXT}
Operational Status:       ${SW_OPER_STATUS_TXT}

EOF

exit 0
